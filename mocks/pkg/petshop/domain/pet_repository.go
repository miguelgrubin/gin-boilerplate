// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/miguelgrubin/gin-boilerplate/pkg/petshop/domain"
	mock "github.com/stretchr/testify/mock"

	shared "github.com/miguelgrubin/gin-boilerplate/pkg/shared"
)

// PetRepository is an autogenerated mock type for the PetRepository type
type PetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *PetRepository) Delete(_a0 shared.EntityId) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(shared.EntityId) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *PetRepository) FindAll() ([]domain.Pet, error) {
	ret := _m.Called()

	var r0 []domain.Pet
	if rf, ok := ret.Get(0).(func() []domain.Pet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: _a0
func (_m *PetRepository) FindOne(_a0 shared.EntityId) (*domain.Pet, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Pet
	if rf, ok := ret.Get(0).(func(shared.EntityId) *domain.Pet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shared.EntityId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *PetRepository) Save(_a0 domain.Pet) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Pet) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
