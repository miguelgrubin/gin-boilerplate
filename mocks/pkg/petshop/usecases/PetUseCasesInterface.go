// Code generated by mockery v2.35.3. DO NOT EDIT.

package usecases

import (
	domain "github.com/miguelgrubin/gin-boilerplate/pkg/petshop/domain"
	mock "github.com/stretchr/testify/mock"

	shared "github.com/miguelgrubin/gin-boilerplate/pkg/shared"

	usecases "github.com/miguelgrubin/gin-boilerplate/pkg/petshop/usecases"
)

// PetUseCasesInterface is an autogenerated mock type for the PetUseCasesInterface type
type PetUseCasesInterface struct {
	mock.Mock
}

type PetUseCasesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PetUseCasesInterface) EXPECT() *PetUseCasesInterface_Expecter {
	return &PetUseCasesInterface_Expecter{mock: &_m.Mock}
}

// Creator provides a mock function with given fields: _a0
func (_m *PetUseCasesInterface) Creator(_a0 usecases.PetCreatorParams) (domain.Pet, error) {
	ret := _m.Called(_a0)

	var r0 domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(usecases.PetCreatorParams) (domain.Pet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(usecases.PetCreatorParams) domain.Pet); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Pet)
	}

	if rf, ok := ret.Get(1).(func(usecases.PetCreatorParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetUseCasesInterface_Creator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creator'
type PetUseCasesInterface_Creator_Call struct {
	*mock.Call
}

// Creator is a helper method to define mock.On call
//   - _a0 usecases.PetCreatorParams
func (_e *PetUseCasesInterface_Expecter) Creator(_a0 interface{}) *PetUseCasesInterface_Creator_Call {
	return &PetUseCasesInterface_Creator_Call{Call: _e.mock.On("Creator", _a0)}
}

func (_c *PetUseCasesInterface_Creator_Call) Run(run func(_a0 usecases.PetCreatorParams)) *PetUseCasesInterface_Creator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(usecases.PetCreatorParams))
	})
	return _c
}

func (_c *PetUseCasesInterface_Creator_Call) Return(_a0 domain.Pet, _a1 error) *PetUseCasesInterface_Creator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetUseCasesInterface_Creator_Call) RunAndReturn(run func(usecases.PetCreatorParams) (domain.Pet, error)) *PetUseCasesInterface_Creator_Call {
	_c.Call.Return(run)
	return _c
}

// Deleter provides a mock function with given fields: _a0
func (_m *PetUseCasesInterface) Deleter(_a0 shared.EntityID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(shared.EntityID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PetUseCasesInterface_Deleter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deleter'
type PetUseCasesInterface_Deleter_Call struct {
	*mock.Call
}

// Deleter is a helper method to define mock.On call
//   - _a0 shared.EntityID
func (_e *PetUseCasesInterface_Expecter) Deleter(_a0 interface{}) *PetUseCasesInterface_Deleter_Call {
	return &PetUseCasesInterface_Deleter_Call{Call: _e.mock.On("Deleter", _a0)}
}

func (_c *PetUseCasesInterface_Deleter_Call) Run(run func(_a0 shared.EntityID)) *PetUseCasesInterface_Deleter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.EntityID))
	})
	return _c
}

func (_c *PetUseCasesInterface_Deleter_Call) Return(_a0 error) *PetUseCasesInterface_Deleter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PetUseCasesInterface_Deleter_Call) RunAndReturn(run func(shared.EntityID) error) *PetUseCasesInterface_Deleter_Call {
	_c.Call.Return(run)
	return _c
}

// Finder provides a mock function with given fields: _a0
func (_m *PetUseCasesInterface) Finder(_a0 usecases.PetFinderParams) ([]domain.Pet, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(usecases.PetFinderParams) ([]domain.Pet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(usecases.PetFinderParams) []domain.Pet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(usecases.PetFinderParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetUseCasesInterface_Finder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finder'
type PetUseCasesInterface_Finder_Call struct {
	*mock.Call
}

// Finder is a helper method to define mock.On call
//   - _a0 usecases.PetFinderParams
func (_e *PetUseCasesInterface_Expecter) Finder(_a0 interface{}) *PetUseCasesInterface_Finder_Call {
	return &PetUseCasesInterface_Finder_Call{Call: _e.mock.On("Finder", _a0)}
}

func (_c *PetUseCasesInterface_Finder_Call) Run(run func(_a0 usecases.PetFinderParams)) *PetUseCasesInterface_Finder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(usecases.PetFinderParams))
	})
	return _c
}

func (_c *PetUseCasesInterface_Finder_Call) Return(_a0 []domain.Pet, _a1 error) *PetUseCasesInterface_Finder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetUseCasesInterface_Finder_Call) RunAndReturn(run func(usecases.PetFinderParams) ([]domain.Pet, error)) *PetUseCasesInterface_Finder_Call {
	_c.Call.Return(run)
	return _c
}

// Showher provides a mock function with given fields: _a0
func (_m *PetUseCasesInterface) Showher(_a0 shared.EntityID) (domain.Pet, error) {
	ret := _m.Called(_a0)

	var r0 domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(shared.EntityID) (domain.Pet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(shared.EntityID) domain.Pet); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Pet)
	}

	if rf, ok := ret.Get(1).(func(shared.EntityID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetUseCasesInterface_Showher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Showher'
type PetUseCasesInterface_Showher_Call struct {
	*mock.Call
}

// Showher is a helper method to define mock.On call
//   - _a0 shared.EntityID
func (_e *PetUseCasesInterface_Expecter) Showher(_a0 interface{}) *PetUseCasesInterface_Showher_Call {
	return &PetUseCasesInterface_Showher_Call{Call: _e.mock.On("Showher", _a0)}
}

func (_c *PetUseCasesInterface_Showher_Call) Run(run func(_a0 shared.EntityID)) *PetUseCasesInterface_Showher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.EntityID))
	})
	return _c
}

func (_c *PetUseCasesInterface_Showher_Call) Return(_a0 domain.Pet, _a1 error) *PetUseCasesInterface_Showher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetUseCasesInterface_Showher_Call) RunAndReturn(run func(shared.EntityID) (domain.Pet, error)) *PetUseCasesInterface_Showher_Call {
	_c.Call.Return(run)
	return _c
}

// Updater provides a mock function with given fields: _a0, _a1
func (_m *PetUseCasesInterface) Updater(_a0 shared.EntityID, _a1 usecases.PetUpdatersParams) (domain.Pet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(shared.EntityID, usecases.PetUpdatersParams) (domain.Pet, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(shared.EntityID, usecases.PetUpdatersParams) domain.Pet); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Pet)
	}

	if rf, ok := ret.Get(1).(func(shared.EntityID, usecases.PetUpdatersParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetUseCasesInterface_Updater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updater'
type PetUseCasesInterface_Updater_Call struct {
	*mock.Call
}

// Updater is a helper method to define mock.On call
//   - _a0 shared.EntityID
//   - _a1 usecases.PetUpdatersParams
func (_e *PetUseCasesInterface_Expecter) Updater(_a0 interface{}, _a1 interface{}) *PetUseCasesInterface_Updater_Call {
	return &PetUseCasesInterface_Updater_Call{Call: _e.mock.On("Updater", _a0, _a1)}
}

func (_c *PetUseCasesInterface_Updater_Call) Run(run func(_a0 shared.EntityID, _a1 usecases.PetUpdatersParams)) *PetUseCasesInterface_Updater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.EntityID), args[1].(usecases.PetUpdatersParams))
	})
	return _c
}

func (_c *PetUseCasesInterface_Updater_Call) Return(_a0 domain.Pet, _a1 error) *PetUseCasesInterface_Updater_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetUseCasesInterface_Updater_Call) RunAndReturn(run func(shared.EntityID, usecases.PetUpdatersParams) (domain.Pet, error)) *PetUseCasesInterface_Updater_Call {
	_c.Call.Return(run)
	return _c
}

// NewPetUseCasesInterface creates a new instance of PetUseCasesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPetUseCasesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PetUseCasesInterface {
	mock := &PetUseCasesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
