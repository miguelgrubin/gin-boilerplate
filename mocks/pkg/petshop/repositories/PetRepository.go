// Code generated by mockery v2.35.3. DO NOT EDIT.

package repositories

import (
	domain "github.com/miguelgrubin/gin-boilerplate/pkg/petshop/domain"
	mock "github.com/stretchr/testify/mock"

	shared "github.com/miguelgrubin/gin-boilerplate/pkg/shared"
)

// PetRepository is an autogenerated mock type for the PetRepository type
type PetRepository struct {
	mock.Mock
}

type PetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PetRepository) EXPECT() *PetRepository_Expecter {
	return &PetRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0
func (_m *PetRepository) Delete(_a0 shared.EntityID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(shared.EntityID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 shared.EntityID
func (_e *PetRepository_Expecter) Delete(_a0 interface{}) *PetRepository_Delete_Call {
	return &PetRepository_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *PetRepository_Delete_Call) Run(run func(_a0 shared.EntityID)) *PetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.EntityID))
	})
	return _c
}

func (_c *PetRepository_Delete_Call) Return(_a0 error) *PetRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PetRepository_Delete_Call) RunAndReturn(run func(shared.EntityID) error) *PetRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *PetRepository) FindAll() ([]domain.Pet, error) {
	ret := _m.Called()

	var r0 []domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Pet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Pet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type PetRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *PetRepository_Expecter) FindAll() *PetRepository_FindAll_Call {
	return &PetRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *PetRepository_FindAll_Call) Run(run func()) *PetRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PetRepository_FindAll_Call) Return(_a0 []domain.Pet, _a1 error) *PetRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetRepository_FindAll_Call) RunAndReturn(run func() ([]domain.Pet, error)) *PetRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: _a0
func (_m *PetRepository) FindOne(_a0 shared.EntityID) (*domain.Pet, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(shared.EntityID) (*domain.Pet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(shared.EntityID) *domain.Pet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(shared.EntityID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PetRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type PetRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - _a0 shared.EntityID
func (_e *PetRepository_Expecter) FindOne(_a0 interface{}) *PetRepository_FindOne_Call {
	return &PetRepository_FindOne_Call{Call: _e.mock.On("FindOne", _a0)}
}

func (_c *PetRepository_FindOne_Call) Run(run func(_a0 shared.EntityID)) *PetRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.EntityID))
	})
	return _c
}

func (_c *PetRepository_FindOne_Call) Return(_a0 *domain.Pet, _a1 error) *PetRepository_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PetRepository_FindOne_Call) RunAndReturn(run func(shared.EntityID) (*domain.Pet, error)) *PetRepository_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *PetRepository) Save(_a0 domain.Pet) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Pet) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 domain.Pet
func (_e *PetRepository_Expecter) Save(_a0 interface{}) *PetRepository_Save_Call {
	return &PetRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *PetRepository_Save_Call) Run(run func(_a0 domain.Pet)) *PetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Pet))
	})
	return _c
}

func (_c *PetRepository_Save_Call) Return(_a0 error) *PetRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PetRepository_Save_Call) RunAndReturn(run func(domain.Pet) error) *PetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewPetRepository creates a new instance of PetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PetRepository {
	mock := &PetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
